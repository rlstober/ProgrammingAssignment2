outcomes <- c("heads","tails")
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
outcomes
sample(outcomes, size = 11, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sim_fair_coin ,_sample(outcomes, size = 100, replace = TRUE)
sim_fair_coin <- sample(outcomes, size = 100, replace = TRUE)
sim_fair_coin
table(sim_fair_coin)
sim_unfair_coin <- sample(outcomes, size = 100, replace = TRUE, prob = c(0.2, 0.8))
outcomes <-c("H","M")
sim_basket <- sample(outcomes, size = 133, replace = TRUE, prob = c(0.55, 0.45))
calc_streak(sim.basket)
calc_streak(sim_basket)
boxplot(sim_basket)
sim_basket
boxplot(calc_streak(sim_basket))
barplot(calc_streak(sim_basket))
barplot(calc_streak(kobe_basket))
barplot(calc_streak(kobe$basket))
median(calc_streak(sim_basket))
median(calc_streak(kobe$basket))
iqr(calc_streak(sim_basket))
IQR(calc_streak(sim_basket))
IQR(calc_streak(kobe$basket))
sum(dbinom(35:3000000,size=3000000,p=.00001))
sum(dbinom(336:3000000,size=3000000,p=.00001))
sum(dbinom(36:3000000,size=3000000,p=.00001))
sum(dbinom(35.5:3000000,size=3000000,p=.00001))
sum(dbinom(35:3000000,size=3000000,p=.00001))
qnorm()
help qnorn
help qnorm
help (qnorm)
pnorm(.81)
1- pnorm(.81)
1- pnorm(30.69,32,4.31)
pnorm(30.69,32,4.31)
pnorm(30.69,32,4.31/6)
30.69+4.31*1.68
30.69+(4.31*1.68)
30.69+(4.31/6*1.68)
(4.31/6*1.68)
30.69-(4.31/6*1.68)
904/sqrt(507)
9.4/sqrt(507)
305.3756/2.33^2*1.96^2
pnorm(1.96)
pnorm(1.98)
pnorm(2)
qnorm(95)
qnorm(.95)
pnorm(1.68)
pnorm(1.64)
qnorm(.98)
qnorm(.98, lower.tail = FALSE)
qnorm(.98, lower.tail = TRUE)
qnorm(.05, lower.tail = TRUE)
qnorm(.025, lower.tail = TRUE)
qnorm(.975, lower.tail = TRUE)
X<-qnorm(.95, lower.tail = TRUE)
X
X^2*300^2/40^2
X^2*300^2/25^2
1.68^2*300^2/25^2
1.64*300/25
19.68^2
load(url("http://www.openintro.org/stat/data/ames.RData"))
dim(ames)
name(ames)
names(ames)
summary(ames)
area <-ames$Gr.Liv.Area)
area <-ames$Gr.Liv.Area
proce <-ames$SalePrice
price <-ames$SalePrice
summary(area)
hist(area)
samp0<-sample(area, 50)
hist(samp0)
samp1<-sample(area, 50)
summary(samp0)
summary(samp1)
sample_means50 <- rep(NA, 5000)
for (i in 1:5000) f
samp <- sample(area, 50)
sample_means50[i] <- mean(samp)
print(i)
g
sample_means_small<- rep(NA,100)
for (i in 1:100) {}
for (i in 1:100) {
samp<-sample(area,50)
sample_means_small[i]<-mean(samp)}
hist(sample_means_small)
dim(sample_means_small)
sample_means_small
sample_means10 <- rep(NA, 5000)
sample_means100 <- rep(NA, 5000)
for (i in 1:5000) {
samp <- sample(area, 10)
sample_means10[i] <- mean(samp)
samp <- sample(area, 100)
sample_means100[i] <- mean(samp)
}
par(mfrow = c(3, 1))
xlimits = range(sample_means10)
hist(sample_means10, breaks = 20, xlim = xlimits)
hist(sample_means50, breaks = 20, xlim = xlimits)
hist(sample_means100, breaks = 20, xlim = xlimits)
population <- ames$Gr.Liv.Area
samp <- sample(population, 60)
sample_mean <- mean(samp)
sample_mean
We can calculate a 95% conﬁdence interval for a sample mean by adding and subtracting 1.96 standard
errors to the point estimate.†
se <- sd(samp)/sqrt(60)
lower <- sample_mean - 1.96 * se
upper <- sample_mean + 1.96 * se
c(lower, upper)
samp_mean <- rep(NA, 50)
samp_sd <- rep(NA, 50)
n <- 60
for(i in 1:50)}
samp <- sample(population, n) # obtain a sample of size n = 60 from the population
samp_mean[i] <- mean(samp) # save sample mean in ith element of samp_mean
samp_sd[i] <- sd(samp) # save sample sd in ith element of samp_sd
}
for(i in 1:50){
samp <- sample(population, n) # obtain a sample of size n = 60 from the population
samp_mean[i] <- mean(samp) # save sample mean in ith element of samp_mean
samp_sd[i] <- sd(samp) # save sample sd in ith element of samp_sd
}
lower <- samp_mean - 1.96 * samp_sd/sqrt(n)
upper <- samp_mean + 1.96 * samp_sd/sqrt(n)
c(lower[1], upper[1])
plot_ci(lower, upper, mean(population))
c(lower[1], upper[1])
plot_ci(lower, upper, mean(population))
mean(population)
help(plot_ci)
??plot_ci
rn_10<-rnorm(n= 10, m= 100, sd=20)
rn_100<-rnorm(n= 100, m= 100, sd=20)
rn_50<-rnorm(n= 50, m= 100, sd=20)
par(mfrow = c(3, 1))
xlimits = range(rn_10)
hist(rn_10, breaks = 20, xlim = xlimits)
hist(rn_50, breaks = 20, xlim = xlimits)
hist(rn_100, breaks = 20, xlim = xlimits)
rn_50<-rnorm(n= 50, m= 100, sd=5)
rn_10<-rnorm(n= 10, m= 100, sd=5)
rn_100<-rnorm(n= 100, m= 100, sd=5)
par(mfrow = c(3, 1))
xlimits = range(rn_10)
hist(rn_10, breaks = 20, xlim = xlimits)
hist(rn_50, breaks = 20, xlim = xlimits)
hist(rn_100, breaks = 20, xlim = xlimits)
rn_1000<-rnorm(n= 1000, m= 100, sd=5)
par(mfrow = c(3, 1))
xlimits = range(rn_10)
hist(rn_50, breaks = 20, xlim = xlimits)
hist(rn_100, breaks = 20, xlim = xlimits)
hist(rn_1000, breaks = 20, xlim = xlimits)
par(mfrow = c(3, 1))
xlimits = range(rn_10)
hist(rn_50, breaks = 20, xlim = xlimits)
hist(rn_100, breaks = 20, xlim = xlimits)
hist(rn_1000, breaks = 40, xlim = xlimits)
rn_1000<-rnorm(n= 1000, m= 100, sd=10)
rn_100<-rnorm(n= 100, m= 100, sd=10)
rn_10000<-rnorm(n= 10000, m= 100, sd=10)
par(mfrow = c(3, 1))
xlimits = range(rn_10)
hist(rn_100, breaks = 20, xlim = xlimits)
hist(rn_1000, breaks = 20, xlim = xlimits)
hist(rn_10000, breaks = 40, xlim = xlimits)
par(mfrow = c(3, 1))
xlimits = range(rn_10)
hist(rn_100, breaks = 40, xlim = xlimits)
hist(rn_1000, breaks = 40, xlim = xlimits)
hist(rn_10000, breaks = 40, xlim = xlimits)
rn_10000<-rnorm(n= 10000, m= 100, sd=20)
rn_10000<-rnorm(n= 1000, m= 100, sd=20)
rn_10000<-rnorm(n= 100, m= 100, sd=20)
par(mfrow = c(3, 1))
xlimits = range(rn_10)
hist(rn_100, breaks = 40, xlim = xlimits)
hist(rn_1000, breaks = 40, xlim = xlimits)
hist(rn_10000, breaks = 40, xlim = xlimits)
par(mfrow = c(3, 1))
xlimits = range(rn_100)
hist(rn_100, breaks = 40, xlim = xlimits)
hist(rn_1000, breaks = 40, xlim = xlimits)
hist(rn_10000, breaks = 40, xlim = xlimits)
rn_100<-rnorm(n= 100, m= 100, sd=20)
req_1000<-rnorm(n= 1000, m= 100, sd=20)
medium_requirement_1000<-rnorm(n= 1000, m= 100, sd=20)
medium_requirement_100<-rnorm(n= 1000, m= 100, sd=20)
medium_requirement_10<-rnorm(n= 1000, m= 100, sd=20)
par(mfrow = c(3, 1))
xlimits = range(medium_requirement_100)
histmedium_requirement_10, breaks = 40, xlim = xlimits)
hist(medium_requirement_100, breaks = 40, xlim = xlimits)
hist(medium_requirement_1000, breaks = 40, xlim = xlimits)
par(mfrow = c(3, 1))
xlimits = range(medium_requirement_100)
hist(medium_requirement_10, breaks = 40, xlim = xlimits)
hist(medium_requirement_100, breaks = 40, xlim = xlimits)
hist(medium_requirement_1000, breaks = 40, xlim = xlimits)
par(mfrow = c(3, 1))
xlimits = range(medium_requirement_100)
hist(medium_requirement_10, breaks = 20, xlim = xlimits)
hist(medium_requirement_100, breaks = 20, xlim = xlimits)
hist(medium_requirement_1000, breaks = 20, xlim = xlimits)
par(mfrow = c(3, 1))
xlimits = range(medium_requirement_10)
hist(medium_requirement_10, breaks = 20, xlim = xlimits)
hist(medium_requirement_100, breaks = 20, xlim = xlimits)
hist(medium_requirement_1000, breaks = 20, xlim = xlimits)
par(mfrow = c(3, 1))
xlimits = range(medium_requirement_10)
hist(medium_requirement_10, breaks = 20, xlim = xlimits)
hist(medium_requirement_100, breaks = 40, xlim = xlimits)
hist(medium_requirement_1000, breaks = 20, xlim = xlimits)
par(mfrow = c(3, 1))
xlimits = range(medium_requirement_100)
hist(medium_requirement_10, breaks = 40, xlim = xlimits)
hist(medium_requirement_100, breaks = 40, xlim = xlimits)
hist(medium_requirement_1000, breaks = 40, xlim = xlimits)
100_Units_5_Cycles<-rnorm(n= 10, m= 100, sd=10)
Units_5_Cycles<-rnorm(n= 5, m= 100, sd=10)
medium_requirement_10<-rnorm(n= 10, m= 100, sd=20)
medium_requirement_100<-rnorm(n= 100, m= 100, sd=20)
medium_requirement_1000<-rnorm(n= 1000, m= 100, sd=20)
par(mfrow = c(3, 1))
xlimits = range(medium_requirement_100)
hist(medium_requirement_10, breaks = 40, xlim = xlimits)
hist(medium_requirement_100, breaks = 40, xlim = xlimits)
hist(medium_requirement_1000, breaks = 40, xlim = xlimits)
par(mfrow = c(3, 1))
xlimits = range(medium_requirement_10)
hist(medium_requirement_10, breaks = 20, xlim = xlimits)
hist(medium_requirement_100, breaks = 20, xlim = xlimits)
hist(medium_requirement_1000, breaks = 20, xlim = xlimits)
Units_10_Cycles<-rnorm(n= 10, m= 100, sd=10)
Units_100_Cycles<-rnorm(n= 100, m= 100, sd=10)
Units_50_Cycles<-rnorm(n= 50, m= 100, sd=10)
par(mfrow = c(3, 1))
xlimits = range(Units_100_Cycles)
hist(Units_10_Cycles, breaks = 20, xlim = xlimits)
hist(Units_50_Cycles, breaks = 20, xlim = xlimits)
hist(Units_100_Cycles, breaks = 20, xlim = xlimits)
qnorm(.25)
qnorm(.75)
pnorm(1)
qnorm(.95)
qnorm(.8)
(qnorm(.8)*18)/4
qnorm(.9)
((qnorm(.9)*18)/4)^2
se <-4.65/sqrt(40)
se
pnorm(-.49/se)
.9*.09
.09*.1
.91*.02
.91*.98
.0182+.081
.081/.0992
nse<-5/sqrt(21)
pnorm(4/nse)
nse<-5/sqrt(100)
pnorm(4/nse)
pnorm(5/nse)
nse
pnorm(-5/nse)
source("http://bit.ly/dasi_inference")
source("http://bit.ly/dasi_inference")
us12 = subset(atheism, atheism$nationality == "United States" & atheism$year ==
"2012")
us12 = subset(atheism, atheism$nationality == "United States" & atheism$year ==
"2012")
.
load(url("http://www.openintro.org/stat/data/atheism.RData"))
load(url("http://www.openintro.org/stat/data/atheism.RData"))
us12 = subset(atheism, atheism$nationality == "United States" & atheism$year ==
"2012")
us12
dim(atheism)
names(atheism)
help(table)
table(us12)
50/(50+952)
inference(us12$response, est = "proportion", type = "ci", method = "theoretical",
success = "atheist")
n <- 1000
p ,_ seq(0,1,.01)
p <- seq(0,1,.01)
me <- 2*sqrt(p*(1-p)/n)
plot me ~ p
plot (me ~ p)
sp0512 = subset(atheism, atheism$nationality == "Spain" & (atheism$year == "2012" | atheism$year == "2005")
)
summary(sp0512)
head(sp0512)
inference(sp0512$response, est = "proportion", type = "ci", method = "theoretical",
success = "atheist", grouping=sp0512$year)
help(inference)
??inference
inference(sp0512$response, est = "proportion", type = "ci", method = "theoretical",
success = "atheist", x=sp0512$year)
us0512 = subset(atheism, atheism$nationality == "United States" & (atheism$year == "2012" | atheism$year == "2005")
)
inference(us0512$response, est = "proportion", type = "ci", method = "theoretical",
success = "atheist", x=sp0512$year)
inference(us0512$response, est = "proportion", type = "ci", method = "theoretical",
success = "atheist", x=us0512$year)
sqrt(196*.25)
1.96^2*.5^2/.01^2
plot (me ~ p)
sqrt(.3*.7/1000)
sqrt(.3*.7/50)
download.file(url = "http://bit.ly/dasi_project_template", destfile = "dasi_project_template.Rmd")
install.packages("knitr")
library("knitr", lib.loc="C:/Users/bobX/Documents/R/win-library/2.15")
load(url("http://bit.ly/dasi_gss_data"))
### Exploratory data analysis:
inference(gss$educ, est = "proportion", t, x=gss$conjudge)
inference(gss$educ, est = "proportion", t, x=gss$conjudge, type = "ci"")
)
)
inference(gss$educ, est = "proportion", t, x=gss$conjudge, type = "ci"")
inference(gss$educ, est = "proportion", t, x=gss$conjudge, type = "ci")
inference(gss$educ, est = "proportion", t, x=gss$conjudge, type = "ci", method = "theoretical")
plot(gss$educ ~ gss$conjudge)
plot(gss$conjudge~gss$educ)
plot(gss$educ ~ gss$conjudge)
inference(y=gss$educ, est = "mean", x=gss$conjudge, type = "ht", method = "theoretical", alternative = "greater")
inference(y=gss$educ, est = "mean", x=gss$conjudge, type = "ht", method = "theoretical")
inference(y=gss$educ, est = "mean", x=gss$conjudge, type = "ht", method = "theoretical", alternative = "greater")
inference(y=gss$educ, est = "mean", x=gss$conjudge, type = "ht", method = "theoretical", alternative = "greater")
load(url("http://bit.ly/dasi_gss_data"))
inference(us0512$response, est = "proportion", type = "ci", method = "theoretical",
success = "atheist", x=sp0512$year)
by(gss$educ, gss$conjudge, summary)
my_data <- subset(gss, select = c(educ, conjudge))
my_cc <-complete.cases(my_data)
my_gss <- my_data[my_cc,]
plot(my_gss$educ ~ my_gss$conjudge)
by(my_gss$educ, my_gss$conjudge, summary)
by(my_gss$educ, my_gss$conjudge, summary)
by(my_gss$educ, my_gss$conjudge, sd)
qqnorm(my_gss[conjudge == "A Great Deal"])
names(my_gss)
qqnorm(my_gss[my_gss$conjudge == "A Great Deal"])
qqnorm(my_gss[1 == "A Great Deal"])
my_gss
head(my_gss)
qqnorm(my_gss[3 == "A Great Deal"])
qqnorm(my_gss[2 == "A Great Deal"])
qqnorm(my_gss[my_gss$conjudge == "A Great Deal"])
qqnorm(my_gss[,conjudge == "A Great Deal"])
help(qqnorm)
qqnorm(my_gss)
qqline(my_gss)
qqnorm(my_gss$educ[my_gss$conjudge == "A Great Deal"])
qqline(my_gss$educ[my_gss$conjudge == "A Great Deal"])
qqline(my_gss$educ[my_gss$conjudge == "Ony Some"])
qqline(my_gss$educ[my_gss$conjudge == "Only Some"])
qqline(my_gss$educ[my_gss$conjudge == "Hardly Any"])
qqnorm(my_gss$educ[my_gss$conjudge == "Hardly Any"])
qqline(my_gss$educ[my_gss$conjudge == "Hardly Any"])
help (qqnorm)
qqnorm(my_gss$educ[my_gss$conjudge == "Hardly Any"], ylab="Hardly Any");qqline(my_gss$educ[my_gss$conjudge == "Hardly Any"])
qqnorm(my_gss$educ[my_gss$conjudge == "Hardly Any"], main="Hardly Any");qqline(my_gss$educ[my_gss$conjudge == "Hardly Any"])
??par
par(mfrow=c(3,1))
qqnorm(my_gss$educ[my_gss$conjudge == "Hardly Any"], main="Hardly Any");qqline(my_gss$educ[my_gss$conjudge == "Hardly Any"])
qqnorm(my_gss$educ[my_gss$conjudge == "Only Some"], main="Only Some");qqline(my_gss$educ[my_gss$conjudge == "Only Some"])
qqnorm(my_gss$educ[my_gss$conjudge == "A Great Deal"], main="A Great Deal");qqline(my_gss$educ[my_gss$conjudge == "A Great Deal"])
alpha = .05
k = 3
bonalpha =.05/3
bonalpha
by(my_gss$educ, my_gss$conjudge, count)
help(by)
table(my_gss$educ, my_gss$conjudge)
table(my_gss)
table(my_gss$conjudge)
cnts<-table(my_gss$conjudge)
cnts
cnts$a_great_deal
cnts$[1]
cnts[1]
dim(cnts)
name(cnts)
names(cnts)
cnts[1,1]
cnts[1,2]
cnts[2,2]
cnts[2]
cnts[2]*2
by(my_gss$educ, my_gss$conjudge, length)
by(my_gss$educ, my_gss$conjudge, length, mean)
mapply(tapply, c(mean = mean, count = length), MoreArgs = list(X = my_gss, INDEX = my_gss$conjudge))
data.frame(rbind(tapply(my_gss$educ, my_gss$conjudge, mean), tapply(my_gss$educ, my_gss$conjudge, length)))
mse = 10
mse
mse = 10; ngd <-12068;nos <-19416;nha<-5531
t_gd_os<- (13.1446 - 12.70777)/sqrt(10/12068 + 10/19416)
t_gd_os
qt(t_gd_os)
qt(t_gd_os, df=30712)
2*pt(t_gd_os, df=30712, lower.tail = FALSE)
t_gd_ha<- (13.1446 - 12.017(10/12068 + 10/5531)
)
t_gd_os<- (13.1446 - 12.70777)/sqrt(10/12068 + 10/19416)
t_gd_ha<- (13.1446 - 12.017)/sqrt(10/12068 + 10/5531)
t_ha_os<- (12.017- 12.70777)/sqrt(10/19416 + 10/5531)
2*pt(t_gd_os, df=30712, lower.tail = FALSE)
2*pt(t_gd_ha, df=30712, lower.tail = FALSE)
2*pt(t_ha_os, df=30712, lower.tail = FALSE)
my_gss
pwd
getwd()
v1 <-c(1,2,3,4)
dim(v1)
length(v1)
length(t(v1))
dim(t(v1))
v1<- seq(1,10)
v2<- seq(1,4)
v1*vv2
v1*v2
v2*v1
v2<- seq(1,5)
v2*v1
v2%*%v1
v2%*%t(v1)
?matrix
m1<-matrix(rnorm(),10,10)
m1<-matrix(rnorm(),nrow=10,ncol=10)
?rnorm
m1<-matrix(rnorm(100),nrow=10,ncol=10)
m1
m1<-matrix(rnorm(100),nrow=3,ncol=4)
m1<-matrix(rnorm(12),nrow=3,ncol=4)
m1
?solve
solve(m1)
m1<-matrix(rnorm(12),nrow=4,ncol=4)
solve(m1)
m1
solve(m1[])
md<-diag(4)
md
solve(m1,md)
solve(md)
d <- seq(1:16)
mr<-matrix(d,4)
mr
solve9mr)
solve(mr)
solve(mr,md)
d <- seq(1:4)
mr<-matrix(d,2)
solve(mr)
source('~/GitHub/ProgrammingAssignment2/makeCacheMatrix.R')
source('~/GitHub/ProgrammingAssignment2/makeCacheMatrix.R')
a <- makeCacheMatrix(matrix(1:4,2))
setwd("~/GitHub/ProgrammingAssignment2")
a <- makeCacheMatrix(matrix(1:4,2))
a <- makeMatrix(matrix(1:4,2))
source('~/GitHub/ProgrammingAssignment2/makeCacheMatrix.R')
a <- makeMatrix(matrix(1:4,2))
source('~/GitHub/ProgrammingAssignment2/makeCacheMatrix.R')
a <- makeMatrix(matrix(1:4,2))
a <- makeCacheMatrix(matrix(1:4,2))
a$get()
a$getinv()
a$set(matrix(5:8,2))
a$get()
source('~/GitHub/ProgrammingAssignment2/makeCacheMatrix.R')
source('~/GitHub/ProgrammingAssignment2/cachesolve.R')
cachesolve(a)
a$getinv()
b<-a$getinv()
a$get() %*%b
a$getinv()
cachesolve(a)
source('~/GitHub/ProgrammingAssignment2/cachesolve.R')
?<<-
help(<<-)
help("<<-")
source('~/GitHub/ProgrammingAssignment2/makeCacheMatrix.R')
a <- makeCacheMatrix(matrix(1:4,2))
a
source('~/GitHub/ProgrammingAssignment2/makeCacheMatrix.R')
source('~/GitHub/ProgrammingAssignment2/makeCacheMatrix.R')
source('~/GitHub/ProgrammingAssignment2/cachesolve.R')
source('~/GitHub/ProgrammingAssignment2/makeCacheMatrix.R')
source('~/GitHub/ProgrammingAssignment2/cachesolve.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
